package DAO;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

import utils.PoiUtils;

/**
 * Clase para conectarse a la base de datos
 */
public class MySQLConnection {

	private static Connection connectionSingleton;

	// Cargar los datos desde el archivo properties
	private static Properties properties;

	static {
		try {
			try {
				properties = PoiUtils.load("src" + File.separator + "main" + File.separator + "resources" + File.separator + "mysql_connection_properties" + File.separator +"mysql_data_connection.properties");
				getConnectionInstance();
			} catch (IOException e) {
				System.err.println("Error loading properties: " + e.getMessage());
			}

		} catch (SQLException e) {
			System.err.println("Error establishing database connection: " + e.getMessage());
		}
	}

	 public static Connection getConnectionInstance() throws SQLException {
	        // Si la conexi칩n es nula o est치 cerrada, crea una nueva
	        if (connectionSingleton == null || connectionSingleton.isClosed()) {
	            // Leer propiedades desde el archivo
	            String url = properties.getProperty("mysql.url");
	            String user = properties.getProperty("mysql.user");
	            String password = properties.getProperty("mysql.password");

	            // Validar que las propiedades requeridas existen
	            if (url == null || user == null || password == null) {
	                throw new IllegalArgumentException("Faltan propiedades requeridas para la conexi칩n a MySQL.");
	            }

	            // Crear nueva conexi칩n
	            connectionSingleton = DriverManager.getConnection(url, user, password);
	            System.out.println("Connected to MySQL database successfully.");
	        }
	        return connectionSingleton;
	    }

	/**
	 * Metodo el cual se va ha encargar de cerrar la conexion al final del programa
	 * 
	 * @return connectionSingleton conexion cerrada
	 * @throws SQLException
	 */
	public static Connection closeConnection() throws SQLException {
		if (connectionSingleton != null) {
			connectionSingleton.close();
		}
		return connectionSingleton;
	}
}